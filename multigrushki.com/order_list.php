<?php

header('Content-type: text/html; charset="utf-8"');

ini_set('display_errors', '1');

require('./vardump.php');

require('./config.php');

#1 Подключение к серверу БД
$id = mysql_connect($db_host, $db_login, $db_password) or die(mysql_error()); // все данные берутся из общего файла config.php

#2 Выбор конкретной необходимой БД для дальнейшей работы с таблицами в ней
mysql_select_db($db_login) or die(mysql_error());

#3 Выполнение запросов для работы с таблицами выбранной БД
    #3.1 Настройка кодировки при обмене данными с конкретной БД
    mysql_query("SET character_set_results = 'utf8'") or die(mysql_error());
    mysql_query("SET character_set_client = 'utf8'") or die(mysql_error());
    mysql_query("SET character_set_connection = 'utf8'") or die(mysql_error());

    #3.2 Считывание содержимого (строки с данными) таблицы БД
    $result = mysql_query('SELECT * FROM `orders`') or die(mysql_error());


#4 Оброботка полученных данных
$formated_data = array();

#4.0(он же 4.3) повторяем процедуру 4.1 до тех пор пока имеются строки с данными
while (($row = mysql_fetch_assoc($result))!== false){
    #4.4 пересохранняем временный результат строки данных в резервный масив для дальнейшей работы
    $formated_data[] = $row;
}

#4.1 извлекаем одну строку данных из архива результатов и сохраням в переменную
#4.2 производим проверку на наличие последней строки с данными / конец цикла

#5.1 (предпоследний пункт) очистка буфера результатов на сервере БД
mysql_free_result($result);



vardump($formated_data);

// Цель: Формирование таблицы данных (отчет) с списком заявок от клиентов
// Процедуры:
# 1.1 Берем записанные данные в БД
# 1.2 Выполняем проверку на наличие / отсутствие информации с записями
# 1.3 На основе результатов проверки п. 1.2 формируем витвление для того чтобы избежать формирования таблицы в случае отсутствия данных


if (!empty($formated_data)){ //# 2.1 Срабатывает при наличии информации с записями в БД

# 2.2 Начало формирования таблицы с заголовком и шапкой (1 этап)
?>
<table>
<caption>
    Список заявок с сайта ...
</caption>
<tr>
    <th>п/п</th>
    <th>Наименование товара</th>
    <th>Номер телефона</th>
    <th>Дата заявки</th>
    <th>Регион заказчика</th>
</tr>
<?php
// Подключаем модуль SxGeo перед работой цикла по формированию строк данных таблицы
// Цель: Отображение названия города в выводимой таблице заказов из БД вместо имеющегося IP адреса
// План:
// 1. Подключаем модуль SxGeo.php
// 2. Создаем объект с параметром чтобы можно было бы работать с БД городов (SxGeoCity.dat)

require('./modules/geo/SxGeo.php');
$SxGeo = new SxGeo('./modules/geo/SxGeoCity.dat');

// 2.3 Конструция позволяет многократно извлекать элементы(записи) из данных для формирования и заполнения данными этих строк
//      соответственно количеству элементов.
foreach($formated_data as $order){

// Считывание названия товара из БЗ goods с ключем goods_id
    $result = mysql_query("SELECT name FROM `goods` WHERE id=". $order['goods_id'] ." LIMIT 1") or die(mysql_error());
    $id_name = mysql_fetch_row($result);

// Цель: Отображение названия города в выводимой таблице заказов из БД вместо имеющегося IP адреса
// План (продолжение):
// 3. Извлекаем данные по интересующему нас IP адресу
// 4. Извлекаем название города из набора данных (массива с ключами)
// 5. Выводим в нужное место таблицы

$location = $SxGeo->getCity($order['ip']);

vardump($location);

?>
<tr>
    <td><?=$order['id']?></td>
    <td><a href="#" title="Наименование товара"><?=$id_name[0]?></a></td>   <!--Для наименования товара необходимо в дальнейшем брать данные из таблицы goods-->
    <td><?=$order['tel']?></td>
    <td><?=$order['timestamp']?></td>
    <td><?=$location['city']['name_ru']?></td>    <!--Необходимо преобразовать из ip в название локации клиента-->
</tr>
<?php
    mysql_free_result($result);
}

// 2.4 Завершение заблицы
?>
</table>

<?php
}



#5.2 (самый последний пункт) Отключение от сервера БД
mysql_close($id);
?>
